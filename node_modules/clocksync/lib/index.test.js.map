{"version":3,"sources":["../src/index.test.js"],"names":["createMockSendRequest","server_now","mockSendRequest","sync_id","cb","time_to_server","Math","random","time_to_client","_timeout","setTimeout","server_time","dispose","clearTiemout","t","expected_offset","sync_done_count","Date","now","clock","interval","delay","sendRequest","syncCallback","err","actual_offset","sync_done","end","percent_diff","abs","ok","actual","expected","stop","start"],"mappings":";;AAAA;;AAEA;;;;;;AAEA,SAASA,qBAAT,CAA+BC,UAA/B,EAA2C;AAC1C,QAAO,SAASC,eAAT,CAAyBC,OAAzB,EAAkCC,EAAlC,EAAsC;AAC5C;AACA,MAAMC,iBAAiBC,KAAKC,MAAL,KAAgB,GAAhB,GAAsB,EAA7C;AACA;AACA,MAAMC,iBAAiBF,KAAKC,MAAL,KAAgB,GAAhB,GAAsB,EAA7C;;AAEA;AACA,MAAIE,WAAWC,WACd,YAAM;AACL,OAAMC,cAAcV,YAApB;AACA;AACAQ,cAAWC,WACV,YAAM;AACLN,OAAG,IAAH,EAASO,WAAT;AACA,IAHS,EAIVH,cAJU,CAAX;AAMA,GAVa,EAWdH,cAXc,CAAf;;AAcA;AACA,SAAO,SAASO,OAAT,GAAmB;AACzBC,gBAAaJ,QAAb;AACA,GAFD;AAGA,EAzBD;AA0BA;;AAED,gBAAK,2DAAL,EAAkE,UAASK,CAAT,EAAY;AAC7E,KAAIC,kBAAkBT,KAAKC,MAAL,KAAgB,EAAhB,GAAmB,IAAnB,GAA0B,KAAG,IAAnD;AACA,KAAIS,kBAAkB,CAAtB;AACA,UAASf,UAAT,GAAsB;AACrB,SAAOgB,KAAKC,GAAL,KAAaH,eAApB;AACA;AACD,KAAMI,QAAQ,qBAAU;AACvBC,YAAU,IADa;AAEvBC,SAAO,GAFgB;AAGvBC,eAAatB,sBAAsBC,UAAtB,CAHU;AAIvBsB,gBAAc,sBAACC,GAAD,EAAMC,aAAN,EAAqBC,SAArB,EAAmC;AAChD,OAAGF,GAAH,EAAQ;AACP,WAAOV,EAAEa,GAAF,CAAMH,GAAN,CAAP;AACA;AACD,OAAMI,eAAetB,KAAKuB,GAAL,CAASd,kBAAkBU,aAA3B,IAA4CV,eAAjE;AACAD,KAAEgB,EAAF,CACCF,gBAAgB,IADjB,2EAEwEA,eAAa,GAFrF,EAGC;AACCG,YAAQN,aADT;AAECO,cAAUjB;AAFX,IAHD;AAQA,OAAIW,SAAJ,EAAgB;AACfV;AACAD,sBAAkBT,KAAKC,MAAL,KAAgB,EAAhB,GAAmB,IAAnB,GAA0B,KAAG,IAA/C;AACA,QAAIS,mBAAmB,CAAvB,EAA0B;AACzBG,WAAMc,IAAN;AACAnB,OAAEa,GAAF;AACA;AACD;AACD;AAzBsB,EAAV,CAAd;AA2BAR,OAAMe,KAAN;AACA,CAlCD","file":"index.test.js","sourcesContent":["import { test } from 'tape'\n\nimport ClockSync from './index'\n\nfunction createMockSendRequest(server_now) {\n\treturn function mockSendRequest(sync_id, cb) {\n\t\t// trip time in ms for the request to get to the server\n\t\tconst time_to_server = Math.random() * 150 + 10;\n\t\t// trip time in ms for the response to get to the client\n\t\tconst time_to_client = Math.random() * 150 + 10;\n\n\t\t// \"send\" request to server\n\t\tlet _timeout = setTimeout( \n\t\t\t() => {\n\t\t\t\tconst server_time = server_now();\n\t\t\t\t// \"send\" response to client\n\t\t\t\t_timeout = setTimeout( \n\t\t\t\t\t() => {\n\t\t\t\t\t\tcb(null, server_time)\n\t\t\t\t\t},\n\t\t\t\t\ttime_to_client\n\t\t\t\t);\n\t\t\t},\n\t\t\ttime_to_server\n\t\t);\n\n\t\t// allow clocksync to cancel the request\n\t\treturn function dispose() {\n\t\t\tclearTiemout(_timeout);\n\t\t} \n\t}\n}\n\ntest('converges to an accurate approximation of the server time', function(t) {\n\tlet expected_offset = Math.random() * 60*1000 + 10*1000;\n\tlet sync_done_count = 0;\n\tfunction server_now() {\n\t\treturn Date.now() + expected_offset;\n\t}\n\tconst clock = ClockSync({\n\t\tinterval: 1000,\n\t\tdelay: 100,\n\t\tsendRequest: createMockSendRequest(server_now),\n\t\tsyncCallback: (err, actual_offset, sync_done) => {\n\t\t\tif(err) {\n\t\t\t\treturn t.end(err);\n\t\t\t}\n\t\t\tconst percent_diff = Math.abs(expected_offset - actual_offset) / expected_offset;\n\t\t\tt.ok(\n\t\t\t\tpercent_diff <= 0.01,\n\t\t\t\t`the approximate server time is within 1% of the actual server time. ${percent_diff*100}`,\n\t\t\t\t{\n\t\t\t\t\tactual: actual_offset,\n\t\t\t\t\texpected: expected_offset\n\t\t\t\t}\n\t\t\t);\n\t\t\tif( sync_done ) {\n\t\t\t\tsync_done_count++;\n\t\t\t\texpected_offset = Math.random() * 60*1000 + 10*1000;\n\t\t\t\tif( sync_done_count >= 2) {\n\t\t\t\t\tclock.stop();\n\t\t\t\t\tt.end();\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t})\n\tclock.start();\n} )\n"]}