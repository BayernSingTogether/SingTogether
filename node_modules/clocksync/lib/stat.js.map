{"version":3,"sources":["../src/stat.js"],"names":["compare","add","sum","mean","std","variance","median","a","b","arr","reduce","length","Math","sqrt","_mean","map","pow","x","sorted","slice","sort"],"mappings":";;;;;QAEgBA,O,GAAAA,O;QAIAC,G,GAAAA,G;QAIAC,G,GAAAA,G;QAIAC,I,GAAAA,I;QAIAC,G,GAAAA,G;QAIAC,Q,GAAAA,Q;QASAC,M,GAAAA,M;AA/BhB;;AAEO,SAASN,OAAT,CAAiBO,CAAjB,EAAoBC,CAApB,EAAuB;AAC5B,SAAOD,IAAIC,CAAJ,GAAQ,CAAR,GAAYD,IAAIC,CAAJ,GAAQ,CAAC,CAAT,GAAa,CAAhC;AACD;;AAEM,SAASP,GAAT,CAAaM,CAAb,EAAgBC,CAAhB,EAAmB;AACxB,SAAOD,IAAIC,CAAX;AACD;;AAEM,SAASN,GAAT,CAAaO,GAAb,EAAkB;AACvB,SAAOA,IAAIC,MAAJ,CAAWT,GAAX,CAAP;AACD;;AAEM,SAASE,IAAT,CAAcM,GAAd,EAAmB;AACxB,SAAOP,IAAIO,GAAJ,IAAWA,IAAIE,MAAtB;AACD;;AAEM,SAASP,GAAT,CAAaK,GAAb,EAAkB;AACvB,SAAOG,KAAKC,IAAL,CAAUR,SAASI,GAAT,CAAV,CAAP;AACD;;AAEM,SAASJ,QAAT,CAAkBI,GAAlB,EAAuB;AAC5B,MAAIA,IAAIE,MAAJ,GAAa,CAAjB,EAAoB,OAAO,CAAP;;AAEpB,MAAIG,QAAQX,KAAKM,GAAL,CAAZ;AACA,SAAOA,IACEM,GADF,CACM;AAAA,WAAKH,KAAKI,GAAL,CAASC,IAAIH,KAAb,EAAoB,CAApB,CAAL;AAAA,GADN,EAEEJ,MAFF,CAEST,GAFT,KAEiBQ,IAAIE,MAAJ,GAAa,CAF9B,CAAP;AAGD;;AAEM,SAASL,MAAT,CAAgBG,GAAhB,EAAqB;AAC1B,MAAIA,IAAIE,MAAJ,GAAa,CAAjB,EAAoB,OAAOF,IAAI,CAAJ,CAAP;;AAEpB,MAAIS,SAAST,IAAIU,KAAJ,GAAYC,IAAZ,CAAiBpB,OAAjB,CAAb;AACA,MAAIkB,OAAOP,MAAP,GAAgB,CAAhB,KAAsB,CAA1B,EAA6B;AAC3B;AACA,WAAO,CAACO,OAAOT,IAAIE,MAAJ,GAAa,CAAb,GAAiB,CAAxB,IAA6BO,OAAOT,IAAIE,MAAJ,GAAa,CAApB,CAA9B,IAAwD,CAA/D;AACD,GAHD,MAIK;AACH;AACA,WAAOO,OAAO,CAACT,IAAIE,MAAJ,GAAa,CAAd,IAAmB,CAA1B,CAAP;AACD;AACF","file":"stat.js","sourcesContent":["// basic statistical functions\n\nexport function compare(a, b) {\n  return a > b ? 1 : a < b ? -1 : 0;\n}\n\nexport function add(a, b) {\n  return a + b;\n}\n\nexport function sum(arr) {\n  return arr.reduce(add);\n}\n\nexport function mean(arr) {\n  return sum(arr) / arr.length;\n}\n\nexport function std(arr) {\n  return Math.sqrt(variance(arr));\n}\n\nexport function variance(arr) {\n  if (arr.length < 2) return 0;\n\n  var _mean = mean(arr);\n  return arr\n          .map(x => Math.pow(x - _mean, 2))\n          .reduce(add) / (arr.length - 1);\n}\n\nexport function median(arr) {\n  if (arr.length < 2) return arr[0];\n\n  var sorted = arr.slice().sort(compare);\n  if (sorted.length % 2 === 0) {\n    // even\n    return (sorted[arr.length / 2 - 1] + sorted[arr.length / 2]) / 2;\n  }\n  else {\n    // odd\n    return sorted[(arr.length - 1) / 2];\n  }\n}"]}